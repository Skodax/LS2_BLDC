


/* ================ Defaults (module) configuration ================ */
var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Timer = xdc.useModule('ti.sysbios.hal.Timer');
var Event = xdc.useModule('ti.sysbios.knl.Event');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Load = xdc.useModule('ti.sysbios.utils.Load');
var LoggingSetup = xdc.useModule('ti.uia.sysbios.LoggingSetup');
var Timestamp = xdc.useModule('xdc.runtime.Timestamp');
var Swi = xdc.useModule('ti.sysbios.knl.Swi');
var Mailbox = xdc.useModule('ti.sysbios.knl.Mailbox');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
/*
 * A flag to allow module names to be loaded on the target. Module name
 * strings are placed in the .const section for debugging purposes.
 *
 * Pick one:
 *  - true (default)
 *      Setting this parameter to true will include name strings in the .const
 *      section so that Errors and Asserts are easier to debug.
 *  - false
 *      Setting this parameter to false will reduce footprint in the .const
 *      section. As a result, Error and Assert messages will contain an
 *      "unknown module" prefix instead of the actual module name.
 */
Defaults.common$.namedModule = true;
//Defaults.common$.namedModule = false;



/* ================ Error configuration ================ */
var Error = xdc.useModule('xdc.runtime.Error');
/*
 * This function is called to handle all raised errors, but unlike
 * Error.raiseHook, this function is responsible for completely handling the
 * error with an appropriately initialized Error_Block.
 *
 * Pick one:
 *  - Error.policyDefault (default)
 *      Calls Error.raiseHook with an initialized Error_Block structure and logs
 *      the error using the module's logger.
 *  - Error.policySpin
 *      Simple alternative that traps on a while(1) loop for minimized target
 *      footprint.
 *      Using Error.policySpin, the Error.raiseHook will NOT called.
 */
Error.policyFxn = Error.policyDefault;
//Error.policyFxn = Error.policySpin;

/*
 * If Error.policyFxn is set to Error.policyDefault, this function is called
 * whenever an error is raised by the Error module.
 *
 * Pick one:
 *  - Error.print (default)
 *      Errors are formatted and output via System_printf() for easier
 *      debugging.
 *  - null
 *      Errors are not formatted or logged. This option reduces code footprint.
 *  - non-null function
 *      Errors invoke custom user function. See the Error module documentation
 *      for more details.
 */
Error.raiseHook = Error.print;
//Error.raiseHook = null;
//Error.raiseHook = "&myErrorFxn";

/*
 * If Error.policyFxn is set to Error.policyDefault, this option applies to the
 * maximum number of times the Error.raiseHook function can be recursively
 * invoked. This option limits the possibility of an infinite recursion that
 * could lead to a stack overflow.
 * The default value is 16.
 */
Error.maxDepth = 2;
//m3Hwi.nvicCCR.UNALIGN_TRP = 1;



/* ================ Idle configuration ================ */
var Idle = xdc.useModule('ti.sysbios.knl.Idle');
/*
 * The Idle module is used to specify a list of functions to be called when no
 * other tasks are running in the system.
 *
 * Functions added here will be run continuously within the idle task.
 *
 * Function signature:
 *     Void func(Void);
 */
//Idle.addFunc("&myIdleFunc");

Idle.addFunc('&Power_idleFunc');  /* add the Power module's idle function */



/* ================ Kernel (SYS/BIOS) configuration ================ */
var BIOS = xdc.useModule('ti.sysbios.BIOS');
/*
 * Enable asserts in the BIOS library.
 *
 * Pick one:
 *  - true (default)
 *      Enables asserts for debugging purposes.
 *  - false
 *      Disables asserts for a reduced code footprint and better performance.
 */
//BIOS.assertsEnabled = true;
BIOS.assertsEnabled = true;

/*
 * A flag to determine if xdc.runtime sources are to be included in a custom
 * built BIOS library.
 *
 * Pick one:
 *  - false (default)
 *      The pre-built xdc.runtime library is provided by the respective target
 *      used to build the application.
 *  - true
 *      xdc.runtime library sources are to be included in the custom BIOS
 *      library. This option yields the most efficient library in both code
 *      footprint and runtime performance.
 */
BIOS.includeXdcRuntime = false;
//BIOS.includeXdcRuntime = true;

/*
 * The SYS/BIOS runtime is provided in the form of a library that is linked
 * with the application. Several forms of this library are provided with the
 * SYS/BIOS product.
 *
 * Pick one:
 *   - BIOS.LibType_Custom
 *      Custom built library that is highly optimized for code footprint and
 *      runtime performance.
 *   - BIOS.LibType_Debug
 *      Custom built library that is non-optimized that can be used to
 *      single-step through APIs with a debugger.
 *
 */
BIOS.libType = BIOS.LibType_Debug;
//BIOS.libType = BIOS.LibType_Debug;

/*
 * Runtime instance creation enable flag.
 *
 * Pick one:
 *   - true (default)
 *      Allows Mod_create() and Mod_delete() to be called at runtime which
 *      requires a default heap for dynamic memory allocation.
 *   - false
 *      Reduces code footprint by disallowing Mod_create() and Mod_delete() to
 *      be called at runtime. Object instances are constructed via
 *      Mod_construct() and destructed via Mod_destruct().
 */
BIOS.runtimeCreatesEnabled = true;
//BIOS.runtimeCreatesEnabled = false;

/*
 * Enable logs in the BIOS library.
 *
 * Pick one:
 *  - true (default)
 *      Enables logs for debugging purposes.
 *  - false
 *      Disables logging for reduced code footprint and improved runtime
 *      performance.
 */
//BIOS.logsEnabled = true;
BIOS.logsEnabled = true;



/* ================ Memory configuration ================ */
var Memory = xdc.useModule('xdc.runtime.Memory');
/*
 * The Memory module itself simply provides a common interface for any
 * variety of system and application specific memory management policies
 * implemented by the IHeap modules(Ex. HeapMem, HeapBuf).
 */

/*
 * Use HeapMem primary heap instance to use linker-defined memory region
 */
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
HeapMem.primaryHeapBaseAddr = "&__primary_heap_start__";
HeapMem.primaryHeapEndAddr = "&__primary_heap_end__";

var heapMemParams = new HeapMem.Params();
heapMemParams.usePrimaryHeap = true;
Program.global.heap0 = HeapMem.create(heapMemParams);

Memory.defaultHeapInstance = Program.global.heap0;


/* ================ Program configuration ================ */
/*
 *  Program.stack must be set to 0 to allow the setting
 *  of the system stack size to be determined in the example's
 *  linker command file.
 */
Program.stack = 0;


/*
 * Uncomment to enable Semihosting for GNU targets to print to the CCS console.
 * Please read the following TIRTOS Wiki page for more information on Semihosting:
 * http://processors.wiki.ti.com/index.php/TI-RTOS_Examples_SemiHosting
 */

if (Program.build.target.$name.match(/gnu/)) {
    //var SemiHost = xdc.useModule('ti.sysbios.rts.gnu.SemiHostSupport');
}
/*
 * A software interrupt is an object that encapsulates a function to be
 * executed and a priority. Software interrupts are prioritized, preempt tasks
 * and are preempted by hardware interrupt service routines.
 *
 * This module is included to allow Swi's in a users' application.
 */



/* ================ System configuration ================ */
var System = xdc.useModule('xdc.runtime.System');
/*
 * The Abort handler is called when the system exits abnormally.
 *
 * Pick one:
 *  - System.abortStd (default)
 *      Call the ANSI C Standard 'abort()' to terminate the application.
 *  - System.abortSpin
 *      A lightweight abort function that loops indefinitely in a while(1) trap
 *      function.
 *  - A custom abort handler
 *      A user-defined function. See the System module documentation for
 *      details.
 */
System.abortFxn = System.abortStd;
//System.abortFxn = System.abortSpin;
//System.abortFxn = "&myAbortSystem";

/*
 * The Exit handler is called when the system exits normally.
 *
 * Pick one:
 *  - System.exitStd (default)
 *      Call the ANSI C Standard 'exit()' to terminate the application.
 *  - System.exitSpin
 *      A lightweight exit function that loops indefinitely in a while(1) trap
 *      function.
 *  - A custom exit function
 *      A user-defined function. See the System module documentation for
 *      details.
 */
System.exitFxn = System.exitStd;
//System.exitFxn = System.exitSpin;
//System.exitFxn = "&myExitSystem";

/*
 * Minimize exit handler array in the System module. The System module includes
 * an array of functions that are registered with System_atexit() which is
 * called by System_exit(). The default value is 8.
 */
System.maxAtexitHandlers = 2;

/*
 * The System.SupportProxy defines a low-level implementation of System
 * functions such as System_printf(), System_flush(), etc.
 *
 * Pick one pair:
 *  - SysMin
 *      This module maintains an internal configurable circular buffer that
 *      stores the output until System_flush() is called.
 *      The size of the circular buffer is set via SysMin.bufSize.
 *  - SysCallback
 *      SysCallback allows for user-defined implementations for System APIs.
 *      The SysCallback support proxy has a smaller code footprint and can be
 *      used to supply custom System_printf services.
 *      The default SysCallback functions point to stub functions. See the
 *      SysCallback module's documentation.
 */
var SysMin = xdc.useModule('xdc.runtime.SysMin');
SysMin.bufSize = 2024;								// Changed by JAN. Original: 512
System.SupportProxy = SysMin;

// ADDED BY JAN
//System.extendedFormats = '%$L%$S%$F%f';


/* ================ Text configuration ================ */
var Text = xdc.useModule('xdc.runtime.Text');
/*
 * These strings are placed in the .const section. Setting this parameter to
 * false will save space in the .const section. Error, Assert and Log messages
 * will print raw ids and args instead of a formatted message.
 *
 * Pick one:
 *  - true (default)
 *      This option loads test string into the .const for easier debugging.
 *  - false
 *      This option reduces the .const footprint.
 */
Text.isLoaded = true;
//Text.isLoaded = false;



/* ================ Types configuration ================ */
var Types = xdc.useModule('xdc.runtime.Types');
/*
 * This module defines basic constants and types used throughout the
 * xdc.runtime package.
 */




/* ================ Application Specific Instances ================ */
Idle.idleFxns[0] = null;
BIOS.customCCOpts = "--endian=little -mv7M4 --abi=eabi --float_support=fpv4spd16 -q -ms  --program_level_compile -g";
var timer0Params = new Timer.Params();
timer0Params.instance.name = "timerMotorControlOL";
timer0Params.period = 1;
timer0Params.startMode = xdc.module("ti.sysbios.interfaces.ITimer").StartMode_USER;
timer0Params.periodType = xdc.module("ti.sysbios.interfaces.ITimer").PeriodType_MICROSECS;
timer0Params.extFreq.lo = 0;
Program.global.timerMotorControlOL = Timer.create(2, "&timerMotorControlOLFx", timer0Params);
var event0Params = new Event.Params();
event0Params.instance.name = "eventPhaseChange";
Program.global.eventPhaseChange = Event.create(event0Params);
Semaphore.supportsEvents = true;
Task.defaultStackSize = 512;
Task.idleTaskStackSize = 1024;
var task0Params = new Task.Params();
task0Params.instance.name = "taskPhaseChange";
task0Params.priority = 10;
task0Params.stackSize = 1024;
Program.global.taskPhaseChange = Task.create("&taskPhaseChangeFx", task0Params);
LoggingSetup.loadTaskLogging = true;
LoggingSetup.loadLoggerSize = 2048;
LoggingSetup.sysbiosLoggerSize = 2048;
var task1Params = new Task.Params();
task1Params.instance.name = "taskMotorControl";
task1Params.stackSize = 1024;
task1Params.priority = 9;
Program.global.taskMotorControl = Task.create("&taskMotorControlFx", task1Params);
var event1Params = new Event.Params();
event1Params.instance.name = "eventMotorControl";
Program.global.eventMotorControl = Event.create(event1Params);
var task2Params = new Task.Params();
task2Params.instance.name = "taskSpeedCalculator";
task2Params.stackSize = 1024;
task2Params.priority = 5;
Program.global.taskSpeedCalculator = Task.create("&taskSpeedCalculatorFx", task2Params);
var event3Params = new Event.Params();
event3Params.instance.name = "eventSpeed";
Program.global.eventSpeed = Event.create(event3Params);
var task3Params = new Task.Params();
task3Params.instance.name = "taskLcd";
task3Params.stackSize = 2048;
Program.global.taskLcd = Task.create("&taskLcdFx", task3Params);
var mailbox1Params = new Mailbox.Params();
mailbox1Params.instance.name = "mbxTheoricalSpeed";
var event2Params = new Event.Params();
event2Params.instance.name = "eventLCD";
Program.global.eventLCD = Event.create(event2Params);
mailbox1Params.readerEvent = Program.global.eventLCD;
mailbox1Params.writerEvent = Program.global.eventLCD;
mailbox1Params.writerEventId = 2;
Program.global.mbxTheoricalSpeed = Mailbox.create(4, 1, mailbox1Params);
var task4Params = new Task.Params();
task4Params.instance.name = "taskJoystickRead";
task4Params.priority = 5;
task4Params.stackSize = 1024;
Program.global.taskJoystickRead = Task.create("&taskJoystickReadFx", task4Params);
Clock.timerId = 0;
Clock.tickPeriod = 100000;
var clock0Params = new Clock.Params();
clock0Params.instance.name = "clockJoystickRead";
clock0Params.period = 1;
clock0Params.startFlag = true;
Program.global.clockJoystickRead = Clock.create("&clockJoystickReadFx", 1, clock0Params);
var semaphore0Params = new Semaphore.Params();
semaphore0Params.instance.name = "semJoystickRead";
Program.global.semJoystickRead = Semaphore.create(null, semaphore0Params);
var mailbox2Params = new Mailbox.Params();
mailbox2Params.instance.name = "mbxJoystick";
mailbox2Params.readerEvent = Program.global.eventLCD;
mailbox2Params.readerEventId = 4;
mailbox2Params.writerEvent = Program.global.eventLCD;
mailbox2Params.writerEventId = 8;
Program.global.mbxJoystick = Mailbox.create(4, 1, mailbox2Params);
var mailbox3Params = new Mailbox.Params();
mailbox3Params.instance.name = "mbxMotorSpeed";
mailbox3Params.readerEvent = Program.global.eventMotorControl;
mailbox3Params.readerEventId = 1;
Program.global.mbxMotorSpeed = Mailbox.create(2, 1, mailbox3Params);
var mailbox4Params = new Mailbox.Params();
mailbox4Params.instance.name = "mbxDutyCycle";
Program.global.mbxDutyCycle = Mailbox.create(4, 1, mailbox4Params);
var hwi0Params = new Hwi.Params();
hwi0Params.instance.name = "hwiPort1";
Program.global.hwiPort1 = Hwi.create(51, "&hwiPort1Fx", hwi0Params);
var hwi1Params = new Hwi.Params();
hwi1Params.instance.name = "hwiPort3";
Program.global.hwiPort3 = Hwi.create(53, "&hwiPort3Fx", hwi1Params);
var hwi2Params = new Hwi.Params();
hwi2Params.instance.name = "hwiPort5";
Program.global.hwiPort5 = Hwi.create(55, "&hwiPort5Fx", hwi2Params);
var swi0Params = new Swi.Params();
swi0Params.instance.name = "swiMotorStop";
swi0Params.priority = 10;
Program.global.swiMotorStop = Swi.create("&swiMotorStopFx", swi0Params);
var swi1Params = new Swi.Params();
swi1Params.instance.name = "swiMotorToggleStatus";
swi1Params.priority = 1;
Program.global.swiMotorToggleStatus = Swi.create("&swiMotorToggleStatusFx", swi1Params);
var timer1Params = new Timer.Params();
timer1Params.instance.name = "timerMotorAcc";
timer1Params.period = 10000;
timer1Params.startMode = xdc.module("ti.sysbios.interfaces.ITimer").StartMode_USER;
Program.global.timerMotorAcc = Timer.create(3, "&timerMotorAccFx", timer1Params);
var hwi3Params = new Hwi.Params();
hwi3Params.instance.name = "hwiADC";
hwi3Params.arg = 15;
Program.global.hwiADC = Hwi.create(40, "&hwiADCFx", hwi3Params);
var swi2Params = new Swi.Params();
swi2Params.instance.name = "swiADCResults";
swi2Params.priority = 15;
Program.global.swiADCResults = Swi.create("&swiADCResultsFx", swi2Params);
var task5Params = new Task.Params();
task5Params.instance.name = "taskADC";
task5Params.priority = 8;
task5Params.stackSize = 1024;
Program.global.taskADC = Task.create("&taskADCFx", task5Params);
var semaphore1Params = new Semaphore.Params();
semaphore1Params.instance.name = "semADCSample";
semaphore1Params.mode = Semaphore.Mode_BINARY;
Program.global.semADCSample = Semaphore.create(null, semaphore1Params);
